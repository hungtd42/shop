#!/usr/bin/env node
var cluster = require('cluster');
var os = require('os');

const CPUS = os.cpus();
if (cluster.isMaster && process.env.MULTI_THREAD === 'true') {
  CPUS.forEach(function() {
    cluster.fork();
  });
  cluster.on('listening', function(worker) {
    console.log('Cluster %d connected', worker.process.pid);
  });
  cluster.on('disconnect', function(worker) {
    console.log('Cluster %d disconnected', worker.process.pid);
  });
  cluster.on('exit', function(worker) {
    console.log('Cluster %d is dead', worker.process.pid);
    // Ensuring a new cluster will start if an old one dies
    cluster.fork();
  });
} else {
  if (process.env.ENV == 'production') {
    var app = require('../dist/app');
  } else {
    var app = require('../app');
  }
  var debug = require('debug')('styletribute:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  const REDIS_PORT = process.env.REDIS_PORT;
  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
